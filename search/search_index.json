{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>Hello World!</p>"},{"location":"binary-search-tree/page-1/","title":"Page 1","text":""},{"location":"binary-search-tree/page-1/#heading","title":"Heading","text":"<p>Sample Text</p>"},{"location":"binary-search-tree/page-2/","title":"Page 2","text":""},{"location":"binary-search-tree/page-2/#heading","title":"Heading","text":"<p>Sample Text</p>"},{"location":"binary-tree/250/","title":"250 - Count Univalue Subtrees","text":"<p>(leetcode.com/problems/count-univalue-subtrees)</p>"},{"location":"binary-tree/250/#problem","title":"Problem","text":"<p>Given the <code>root</code> of a binary tree, return the number of uni-value subtrees.</p> <p>A uni-value subtree means all nodes of the subtree have the same value.</p> <p>Example 1:</p> <p></p> <pre>Input: root = [5,1,5,5,5,null,5]\nOutput: 4\n</pre> <p>Example 2:</p> <pre>Input: root = []\nOutput: 0\n</pre> <p>Example 3:</p> <pre>Input: root = [5,5,5,5,5,null,5]\nOutput: 6\n</pre> <p>Constraints:</p> <ul> <li>The number of the node in the tree will be in the range <code>[0, 1000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"binary-tree/250/#solution","title":"Solution","text":"<pre><code>class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef countUnivalSubtrees(root: Node) -&gt; int:\n    \"\"\"Return the number of univalue subtrees.\"\"\"\n\n    if root is None:\n        return 0\n\n    count = [0]\n    isUnival(root, count)\n    return count[0]\n\n\ndef isUnival(node: Node, count) -&gt; bool:\n    \"\"\"Return True if the tree rooted at the given node is an univalue subtree.\n       Assumptions:\n       (1) node is not None\n       (2) count is a list of size 1\n    \"\"\"\n\n    if node.left is None and node.right is None:\n        count[0] += 1\n        return True\n\n    elif node.left is not None and node.right is None:\n        if isUnival(node.left, count) and node.val == node.left.val:\n            count[0] += 1\n            return True\n\n    elif node.left is None and node.right is not None:\n        if isUnival(node.right, count) and node.val == node.right.val:\n            count[0] += 1\n            return True\n\n    else:\n        leftIsUnival = isUnival(node.left, count)\n        rightIsUnival = isUnival(node.right, count)\n        if leftIsUnival and rightIsUnival and node.val == node.left.val and node.val == node.right.val:\n            count[0] += 1\n            return True\n\n    return False\n</code></pre>"},{"location":"binary-tree/page/","title":"Page 2","text":""},{"location":"binary-tree/page/#heading","title":"Heading","text":"<p>Sample Text</p>"},{"location":"binary-tree/something/","title":"Something","text":"<p>Hiiiii!!!!!:</p>"}]}